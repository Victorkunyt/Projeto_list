generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url  = env("DATABASE_URL")
}


model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  holderid      String
  cellphone     String 
  email         String
  gender        String
  password      String
  status        Boolean
  created_at    DateTime?     @default(now())
  updated_at    DateTime?     @default(now())
  refreshToken  RefreshToken?
  tasks         Task[]       @relation("UserTasks")
  sharedTasks   SharedTask[] @relation("SharedTaskToUser") // Relação com a tabela de junção
  notifications   Notification[] @relation("UserNotifications")
  createdCategories Category[] @relation("Categories_by_id") // Adicionando relação inversa

  
  @@map("Users")
}

model Task {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  nametask      String
  category      Category?     @relation(fields: [categoryId], references: [id]) 
  categoryId    String?       @map("category_id") @db.ObjectId
  user          User?         @relation("UserTasks", fields: [userId], references: [id])
  userId        String?       @map("user_id") @db.ObjectId

  
  status        Boolean
  created_at    DateTime?     @default(now())
  updated_at    DateTime?     @default(now())
  @@map("Tasks")
}

model SharedTask {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  category      Category?     @relation(fields: [categoryId], references: [id]) 
  categoryId    String?       @map("category_id") @db.ObjectId
  user          User          @relation("SharedTaskToUser", fields: [userId], references: [id])
  userId        String        @map("user_id") @db.ObjectId
  taskId        String        @map("task_id") @db.ObjectId
  @@map("SharedTasks")
}


model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  nameCategory  String
  user     User?          @relation("Categories_by_id",fields: [userId], references: [id])
  userId   String             @map("created_by_id") @db.ObjectId
  tasks         Task[]
  sharedTasks   SharedTask[]   
  status        Boolean
  @@map("Categories")
}


model RefreshToken {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  expiresIn    Int
  createdAt    DateTime  @default(now())
  User         User      @relation(fields: [UserId], references: [id])
  UserId       String    @map("_userId") @unique @db.ObjectId
  @@map("RefreshToken")
}


model Notification {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  type          String    // Tipo de notificação (por exemplo, "compartilhamento de tarefa")
  recipient     User      @relation("UserNotifications", fields: [recipientId], references: [id])
  recipientId   String    @map("recipient_id") @db.ObjectId
  timestamp     DateTime  @default(now())
  expiresAt     DateTime? // Campo opcional para a data de expiração
}


model PdfStorage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  pdfBlob   Bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("PdfStorage")
}






